---
# This file should abstract out the cert paths in the vault
meta:
  certs:
    network_policy:
      ca:          (( vault meta.vault "/network_policy/certs/ca:certificate" ))
      server_cert: (( vault meta.vault "/network_policy/certs/server:certificate" ))
      server_key:  (( vault meta.vault "/network_policy/certs/server:key" ))
      client_cert: (( vault meta.vault "/network_policy/certs/client:certificate" ))
      client_key:  (( vault meta.vault "/network_policy/certs/client:key" ))

    silk:
      ca:          (( vault meta.vault "/silk/certs/ca:certificate" ))
      server_cert: (( vault meta.vault "/silk/certs/server:certificate" ))
      server_key:  (( vault meta.vault "/silk/certs/server:key" ))
      client_cert: (( vault meta.vault "/silk/certs/client:certificate" ))
      client_key:  (( vault meta.vault "/silk/certs/client:key" ))

    diego:
      ca: (( vault meta.vault "/diego/certs/ca:certificate" ))

      public_tls: 
        certificate: (( vault meta.vault "/diego/certs/public_tls:certificate" ))
        private_key: (( vault meta.vault "/diego/certs/public_tls:key" ))

      executer:
        ca:         (( vault meta.vault "/diego/certs/instance_identity/ca:certificate" ))
        ca_private: (( vault meta.vault "/diego/certs/instance_identity/ca:key" ))

      auctioneer:
        server:
          server_cert: (( vault meta.vault "/diego/certs/auctioneer:certificate" ))
          server_key:  (( vault meta.vault "/diego/certs/auctioneer:key" ))
        client:
          client_cert: (( vault meta.vault "/diego/certs/auctioneer_client:certificate" ))
          client_key:  (( vault meta.vault "/diego/certs/auctioneer_client:key" ))

      bbs:
        server:
          server_cert: (( vault meta.vault "/diego/certs/bbs:certificate" ))
          server_key:  (( vault meta.vault "/diego/certs/bbs:key" ))
        client:
          client_cert: (( vault meta.vault "/diego/certs/bbs_client:certificate" ))
          client_key:  (( vault meta.vault "/diego/certs/bbs_client:key" ))

      rlp_gateway:
        cert: (( vault meta.vault "/diego/certs/loggregator_rlp_gateway:certificate" ))
        key:  (( vault meta.vault "/diego/certs/loggregator_rlp_gateway:key" ))

      capi:
        server:
          public_cert: (( vault meta.vault "/diego/certs/capi:certificate" ))
          private_key: (( vault meta.vault "/diego/certs/capi:key" ))
        client:
          cert: (( vault meta.vault "/diego/certs/capi_client:certificate" ))
          key:  (( vault meta.vault "/diego/certs/capi_client:key" ))

      cc_uploader:
        server:
          server_cert: (( vault meta.vault "/diego/certs/cc_uploader_server:certificate" ))
          server_key:  (( vault meta.vault "/diego/certs/cc_uploader_server:key" ))
        client:
          client_cert: (( vault meta.vault "/diego/certs/cc_uploader:certificate" ))
          client_key:  (( vault meta.vault "/diego/certs/cc_uploader:key" ))

      cc_deployment_updater:
        server:
          server_cert: (( vault meta.vault "/diego/certs/cc_deployment_updater_server:certificate" ))
          server_key:  (( vault meta.vault "/diego/certs/cc_deployment_updater_server:key" ))
        client:
          server_cert: (( vault meta.vault "/diego/certs/cc_deployment_updater:certificate" ))
          server_key:  (( vault meta.vault "/diego/certs/cc_deployment_updater:key" ))

      rep:
        server:
          server_cert: (( vault meta.vault "/diego/certs/rep:certificate" ))
          server_key:  (( vault meta.vault "/diego/certs/rep:key" ))
        client:
          client_cert: (( vault meta.vault "/diego/certs/rep_client:certificate" ))
          client_key:  (( vault meta.vault "/diego/certs/rep_client:key" ))

      syslogdrainbinder:
        server:
          cert: (( vault meta.vault "/diego/certs/syslogdrainbinder:certificate" ))
          key:  (( vault meta.vault "/diego/certs/syslogdrainbinder:key" ))

      tps:
        client:
          client_cert: (( vault meta.vault "/diego/certs/rep_client:certificate" ))
          client_key:  (( vault meta.vault "/diego/certs/rep_client:key" ))

      locket:
        server_cert: (( vault meta.vault "/diego/certs/locket_server:certificate" ))
        server_key:  (( vault meta.vault "/diego/certs/locket_server:key" ))

        ssh_proxy_backends_tls:
          client:
            cert: (( vault meta.vault "/diego/certs/ssh_proxy_backends_tls:certificate" ))
            key:  (( vault meta.vault "/diego/certs/ssh_proxy_backends_tls:key" ))

    loggregator:
      ca: (( vault meta.vault "/loggregator/certs/ca:certificate" ))

      doppler:
        server:
          cert: (( vault meta.vault "/loggregator/certs/doppler:certificate" ))
          key:  (( vault meta.vault "/loggregator/certs/doppler:key" ))

      metron:
        server:
          cert: (( vault meta.vault "/loggregator/certs/metron:certificate" ))
          key:  (( vault meta.vault "/loggregator/certs/metron:key" ))

      forwarder_agent:
        cert: (( vault meta.vault "/loggregator/certs/forwarder_agent:certificate" ))
        key:  (( vault meta.vault "/loggregator/certs/forwarder_agent:key" ))

      logcache:
        cert: (( vault meta.vault "/loggregator/certs/log_cache:certificate" ))
        key:  (( vault meta.vault "/loggregator/certs/log_cache:key" ))

      rlp_gateway:
        cert: (( vault meta.vault "/loggregator/certs/rlp_gateway:certificate" ))
        key:  (( vault meta.vault "/loggregator/certs/rlp_gateway:key" ))

      trafficcontroller:
        server:
          cert: (( vault meta.vault "/loggregator/certs/trafficcontroller:certificate" ))
          key:  (( vault meta.vault "/loggregator/certs/trafficcontroller:key" ))

      statsdinjector:
        server:
          cert: (( vault meta.vault "/loggregator/certs/statsdinjector:certificate" ))
          key:  (( vault meta.vault "/loggregator/certs/statsdinjector:key" ))

      syslogger:
        server:
          cert: (( vault meta.vault "/loggregator/certs/syslogger_server:certificate" ))
          key:  (( vault meta.vault "/loggregator/certs/syslogger_server:key" ))
        rlp:
          cert: (( vault meta.vault "/loggregator/certs/syslogger_rlp:certificate" ))
          key:  (( vault meta.vault "/loggregator/certs/syslogger_rlp:key" ))
        client:
          cert: (( vault meta.vault "/loggregator/certs/syslogger_client:certificate" ))
          key:  (( vault meta.vault "/loggregator/certs/syslogger_client:key" ))
        api:
          cert: (( vault meta.vault "/diego/certs/syslogger_scheduler:certificate" ))
          key:  (( vault meta.vault "/diego/certs/syslogger_scheduler:key" ))
      
    log_cache:
      ca:   (( vault meta.vault "/log_cache/certs/ca:certificate" ))

      log_cache_proxy:
        cert: (( vault meta.vault "/log_cache/certs/log_cache_proxy:certificate" ))
        key:  (( vault meta.vault "/log_cache/certs/log_cache_proxy:key" ))
    
    prometheus: 
      ca: (( vault meta.vault "/prometheus/certs/ca:certificate" ))

      log_cache_metrics:
        cert: (( vault meta.vault "/prometheus/certs/log_cache_metrics:certificate" ))
        key:  (( vault meta.vault "/prometheus/certs/log_cache_metrics:key" ))

      log_cache_cf_auth_proxy_metrics:
        cert: (( vault meta.vault "/prometheus/certs/log_cache_cf_auth_proxy_metrics:certificate" ))
        key:  (( vault meta.vault "/prometheus/certs/log_cache_cf_auth_proxy_metrics:key" ))

      log_cache_gateway_metrics:
        cert: (( vault meta.vault "/prometheus/certs/log_cache_gateway_metrics:certificate" ))
        key:  (( vault meta.vault "/prometheus/certs/log_cache_gateway_metrics:key" ))

      forwarder_agent_metrics:
        cert: (( vault meta.vault "/prometheus/certs/forwarder_agent_metrics:certificate" ))
        key:  (( vault meta.vault "/prometheus/certs/forwarder_agent_metrics:key" ))

      loggregator_agent_metrics:
        cert: (( vault meta.vault "/prometheus/certs/loggregator_agent_metrics:certificate" ))
        key:  (( vault meta.vault "/prometheus/certs/loggregator_agent_metrics:key" ))

      loggr_udp_forwarder:
        cert: (( vault meta.vault "/prometheus/certs/loggr_udp_forwarder:certificate" ))
        key:  (( vault meta.vault "/prometheus/certs/loggr_udp_forwarder:key" ))

      prom_scraper_scrape:
        cert: (( vault meta.vault "/prometheus/certs/prom_scraper_scrape:certificate" ))
        key:  (( vault meta.vault "/prometheus/certs/prom_scraper_scrape:key" ))

      prom_scraper_metrics:
        cert: (( vault meta.vault "/prometheus/certs/prom_scraper_metrics:certificate" ))
        key:  (( vault meta.vault "/prometheus/certs/prom_scraper_metrics:key" ))

      rlp_gateway_metrics:
        cert: (( vault meta.vault "/prometheus/certs/rlp_gateway_metrics:certificate" ))
        key:  (( vault meta.vault "/prometheus/certs/rlp_gateway_metrics:key" ))

    uaa:
      ca: (( vault meta.vault "/uaa/certs/ca:certificate" ))
      server:
        cert: (( vault meta.vault "/uaa/certs/server:certificate" ))
        key:  (( vault meta.vault "/uaa/certs/server:key" ))
